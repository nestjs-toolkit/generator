import { Logger } from '@nestjs/common';
import { CommandHandler, EventBus, ICommandHandler } from '@nestjs/cqrs';
import clc from 'cli-color';
import { ContextType } from '@core/types';
import { RowValidationException } from '@core/exceptions';
import { <%= namePluralPascal %>Repository } from '../../<%= namePlural %>.repository';
import { <%= namePascal %> } from '../../schemas';
import { <%= namePascal %>UpdateDto } from '../../dto';
import { <%= namePascal %>UpdatedEvent } from '../../events/impl';
import { UpdateMany<%= namePascal %>Command } from '../impl';

type Response = { nModified: number; results: <%= namePascal %>[] };

@CommandHandler(UpdateMany<%= namePascal %>Command)
export class UpdateMany<%= namePascal %>Handler
  implements ICommandHandler<UpdateMany<%= namePascal %>Command> {
  private logger = new Logger(UpdateMany<%= namePascal %>Handler.name);

  constructor(
    private readonly eventBus: EventBus,
    private readonly repository: <%= namePluralPascal %>Repository,
  ) {}

  async execute({
    filter,
    update,
    context,
  }: UpdateMany<%= namePascal %>Command): Promise<Response> {
    const models = await this.repository.findByFilters(filter);

    const promises = models.map((model, index) => {
      this.logger.debug(
        clc.redBright(
          `Init update <%= nameCamel %> ${index + 1}/${models.length}: ${model.name}`,
        ),
      );

      return this.update(model, update, context);
    });

    const results = await Promise.all(promises);
    const modifiers = results.filter((model) => !!model);

    return {
      results: modifiers,
      nModified: modifiers.length,
    };
  }

  private async update(
    model: <%= namePascal %>,
    dto: <%= namePascal %>UpdateDto,
    context: ContextType,
  ) {
    try {
      model.set(dto);
      await model.save();
    } catch (e) {
      this.logger.error(e);

      if (e.code === 11000) {
        throw new RowValidationException(
          `input.*`,
          'string.unique',
          'campo "slug ou nome" já está sendo utilizado!',
        );
      }

      return null;
    }

    const old = model.toJSON();
    this.eventBus.publish(new <%= namePascal %>UpdatedEvent(model, old, dto, context));

    return model;
  }
}
