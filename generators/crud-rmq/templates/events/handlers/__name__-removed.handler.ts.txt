import { IEventHandler, EventsHandler } from '@nestjs/cqrs';
import { WinstonLogger } from '@nestjs-toolkit/winston-logger';
import { <%= namePascal %>RemovedEvent } from '../impl';

// TODO refatorar para registrar enviar para logstash + kibana
@EventsHandler(<%= namePascal %>RemovedEvent)
export class <%= namePascal %>RemovedHandler implements IEventHandler<<%= namePascal %>RemovedEvent> {
  constructor(private readonly logger: WinstonLogger) {}

  handle({ model, filter, context }: <%= namePascal %>RemovedEvent) {
    const { req, user } = context;
    const causer = {
      collection: 'user_keycloak',
      username: user.username,
      _id: user.sub,
    };

    this.logger
      .activity()
      .tags('<%= namePlural %>')
      .action('<%= namePlural %>:remove')
      .requestRpc(req)
      .causedBy(causer)
      .performedOn(model, '<%= namePlural %>')
      .namespaceById('*', 'manager')
      .withProperty('dto', filter)
      .withProperty('model', model.toJSON())
      .contextIn(<%= namePascal %>RemovedHandler.name)
      .log('Cen√°rio removido: :subject.name');
  }
}
