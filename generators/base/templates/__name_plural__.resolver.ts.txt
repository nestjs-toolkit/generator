import {
  Args,
  Context,
  Mutation,
  Query,
  Resolver,
  Subscription,
} from '@nestjs/graphql';
import { Public } from 'nestjs-keycloak-admin';
import { <%= namePluralPascal %>Repository } from './<%= namePlural %>.repository';
import { <%= namePascal %>CreateDto, <%= namePascal %>SearchDto, <%= namePascal %>UpdateDto } from './dto';
import { Request } from '../../types';
import { PubSubService } from '../../graphql';
import { <%= nameUp %>_ON_CHANGES } from './<%= namePlural %>.constants';

@Resolver()
export class <%= namePluralPascal %>Resolver {
  constructor(
    private readonly pubSub: PubSubService,
    private readonly repository: <%= namePluralPascal %>Repository,
  ) {}

  @Query()
  <%= namePlural %>(@Args('params') params: <%= namePascal %>SearchDto) {
    return this.repository.search(params);
  }

  @Query()
  <%= name %>(@Args('id') id: string) {
    return this.repository.find(id);
  }

  @Mutation()
  async create<%= namePascal %>(
    @Context('req') req: Request,
    @Args('input') dto: <%= namePascal %>CreateDto,
  ) {
    const model = await this.repository.create(dto, req);

    return {
      message: '<%= namePascal %> created successfully',
      data: model,
    };
  }

  @Mutation()
  async update<%= namePascal %>(
    @Context('req') req: Request,
    @Args('id') id: string,
    @Args('input') dto: <%= namePascal %>UpdateDto,
  ) {
    const { model } = await this.repository.updateByID(id, dto, req);

    return {
      message: '<%= namePascal %> updated successfully',
      data: model,
    };
  }

  @Mutation()
  async delete<%= namePascal %>(@Context('request') req: any, @Args('id') id: string) {
    await this.repository.deleteByID(id, req);

    return {
      message: '<%= namePascal %> deleted successfully',
    };
  }

  @Subscription()
  @Public()
  <%= name %>OnChanges() {
    return this.pubSub.asyncIterator(<%= nameUp %>_ON_CHANGES);
  }
}
