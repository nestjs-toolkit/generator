import { Injectable } from '@nestjs/common';
import {
  AbstractRepository,
  MaybeModelWithOld,
} from '@lib/commons/repositories';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { WinstonLogger } from '@nestjs-toolkit/winston-logger';
import { EventBus } from '@nestjs/cqrs';
import { <%= namePascal %> } from './schemas';
import { <%= namePascal %>CreateDto, <%= namePascal %>UpdateDto } from './dto';
import {
  <%= namePascal %>CreatedEvent,
  <%= namePascal %>DeletedEvent,
  <%= namePascal %>UpdatedEvent,
} from './events';
import { Request } from '../../types';
import { <%= namePascal %>SearchInput } from '../../graphql';

@Injectable()
export class <%= namePluralPascal %>Repository extends AbstractRepository<<%= namePascal %>, Request> {
  constructor(
    private readonly eventBus: EventBus,
    private readonly logger: WinstonLogger,
    @InjectModel(<%= namePascal %>.name) <%= name %>Model: Model<<%= namePascal %>>,
  ) {
    super(<%= name %>Model);
  }

  async search(
    params: <%= namePascal %>SearchInput,
    projection: any = null,
  ): Promise<any> {
    const { page, perPage } = Object.assign({ page: 1, perPage: 12 }, params);
    const conditions = this.createQueryObject(params?.filter);

    const models = await this.model
      .find(conditions, projection)
      .limit(perPage)
      .skip((page - 1) * perPage)
      .sort(params?.sort || { name: 1 })
      .exec();

    const total = await this.model.countDocuments(conditions).exec();

    return {
      edges: models,
      pagination: {
        total,
        page,
        perPage,
        lastPage: Math.floor(total / perPage),
      },
    };
  }

  async create(dto: <%= namePascal %>CreateDto, req?: Request): Promise<<%= namePascal %>> {
    const <%= name %> = new this.model(dto);
    await <%= name %>.save();

    const event = new <%= namePascal %>CreatedEvent(<%= name %>, req);

    this.logger
      .activity()
      .withEvent(event)
      .withProperty('dto', dto)
      .contextIn(<%= namePluralPascal %>Repository.name)
      .log('create <%= name %>: :subject.name');

    this.eventBus.publish(event);

    return <%= name %>;
  }
  
  async update(
    model: <%= namePascal %>,
    dto: <%= namePascal %>UpdateDto,
    req?: Request,
  ): Promise<MaybeModelWithOld<<%= namePascal %>>> {
    const result = await this.updateOne({ _id: model._id }, dto);

    const event = new <%= namePascal %>UpdatedEvent(result.model, result.old, req);

    this.logger
      .activity()
      .withEvent(event)
      .withProperty('dto', dto)
      .contextIn(<%= namePluralPascal %>Repository.name)
      .log('update <%= name %>: :subject.name');

    this.eventBus.publish(event);

    return result;
  }

  async delete(<%= name %>: <%= namePascal %>, req?: Request): Promise<boolean> {
    const { deletedCount } = await this.model.deleteOne({ _id: <%= name %>._id });

    if (deletedCount) {
      const event = new <%= namePascal %>DeletedEvent(<%= name %>, req);

      this.logger
        .activity()
        .withEvent(event)
        .contextIn(<%= namePluralPascal %>Repository.name)
        .log('delete <%= name %>: :subject.name');

      this.eventBus.publish(event);
    }

    return true;
  }
}
