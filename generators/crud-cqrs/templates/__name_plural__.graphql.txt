input Sort<%= namePascal %>Input {
    name: SortOrderEnum
    enable: SortOrderEnum
    createdAt: SortOrderEnum
    updatedAt: SortOrderEnum
}

input <%= namePascal %>ConditionAndInput {
    name: String
    slug: String
    enable: Boolean
}

input <%= namePascal %>SearchInput {
    q: String
    ids: [ID]
    sort: Sort<%= namePascal %>Input
    page: Int
    perPage: Int
    and: <%= namePascal %>ConditionAndInput
}

input <%= namePascal %>CreateInput {
    name: String!
    position: Int!
    slug: String!
    enable: Boolean!
}

input <%= namePascal %>FilterInput {
    ids: [ID]!
    forceAll: Boolean
}

input <%= namePascal %>UpdateDataInput {
    name: String
    position: Int
    slug: String
    enable: Boolean
}

type <%= namePascal %>Response {
    message: String
    edges: [<%= namePascal %>!]!
    pagination: Pagination
}

#type <%= namePascal %>OnChanges {
#    action: ActionsEnum!
#    result: [<%= namePascal %>]!
#}

type <%= namePascal %> {
    _id: ID!
    name: String!
    slug: String!
    enable: Boolean!
    createdAt: CustomDate!
    updatedAt: CustomDate!
}

type Query {
    <%= nameCamel %>(id: ID!): <%= namePascal %>
    <%= namePlural %>(params: <%= namePascal %>SearchInput): <%= namePascal %>Response!
}

type Mutation {
    create<%= namePluralPascal %>(rows: [<%= namePascal %>CreateInput]!): <%= namePascal %>Response!
    update<%= namePluralPascal %>(filter: <%= namePascal %>FilterInput!, input: <%= namePascal %>UpdateDataInput!): <%= namePascal %>Response!
    remove<%= namePluralPascal %>(filter: <%= namePascal %>FilterInput!): <%= namePascal %>Response!
}

#type Subscription {
#    changed<%= namePascal %>: <%= namePascal %>OnChanges!
#}

