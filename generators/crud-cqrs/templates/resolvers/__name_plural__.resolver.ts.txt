import {
  Args,
  Context,
  Mutation,
  Parent,
  Query,
  ResolveField,
  Resolver,
} from '@nestjs/graphql';
import { CommandBus, QueryBus } from '@nestjs/cqrs';
import { ContextType, EdgesResponse } from '@core/types';
import { <%= namePascal %> } from '../schemas';
import { Find<%= namePascal %>Query, Search<%= namePluralPascal %>Query } from '../queries/impl';
import {
  <%= namePascal %>CreateArgs,
  <%= namePascal %>FindArgs,
  <%= namePascal %>RemoveArgs,
  <%= namePascal %>SearchArgs,
  <%= namePascal %>UpdateArgs,
} from '../dto';
import {
  CreateMany<%= namePascal %>Command,
  RemoveMany<%= namePascal %>Command,
  UpdateMany<%= namePascal %>Command,
} from '../commands/impl';
import {
  Create<%= namePascal %>Pipe,
  Remove<%= namePascal %>Pipe,
  Search<%= namePascal %>Pipe,
  Update<%= namePascal %>Pipe,
} from '../pipes';

@Resolver('<%= namePascal %>')
export class <%= namePluralPascal %>Resolver {
  constructor(
    private readonly commandBus: CommandBus,
    private readonly queryBus: QueryBus,
  ) {}

  @Mutation('create<%= namePluralPascal %>')
  async create(
    @Context() context: ContextType,
    @Args(Create<%= namePascal %>Pipe) { rows }: <%= namePascal %>CreateArgs,
  ): Promise<EdgesResponse<<%= namePascal %>>> {
    const result = await this.commandBus.execute(
      new CreateMany<%= namePascal %>Command(rows, context),
    );

    return {
      edges: result,
      message: 'Cenário registrado com sucesso',
    };
  }

  @Query('<%= nameCamel %>')
  async find(@Args() { id }: <%= namePascal %>FindArgs): Promise<<%= namePascal %>> {
    return this.queryBus.execute(new Find<%= namePascal %>Query(id));
  }

  @Query('<%= namePlural %>')
  async search(
    @Args(Search<%= namePascal %>Pipe) { params }: <%= namePascal %>SearchArgs,
  ): Promise<EdgesResponse<<%= namePascal %>>> {
    return this.queryBus.execute(new Search<%= namePluralPascal %>Query(params));
  }

  @Mutation('update<%= namePluralPascal %>')
  async update(
    @Context() context: ContextType,
    @Args(Update<%= namePascal %>Pipe) { filter, input }: <%= namePascal %>UpdateArgs,
  ): Promise<EdgesResponse<<%= namePascal %>>> {
    const { nModified, results } = await this.commandBus.execute(
      new UpdateMany<%= namePascal %>Command(filter, input, context),
    );

    if (nModified === 0) {
      return {
        edges: results,
        message: 'Nenhuma cenário foi encontrada!',
      };
    }

    const message =
      nModified === 1
        ? 'Cenário atualizado com sucesso!'
        : `Foram atualizados ${nModified} cenários!`;

    return {
      edges: results,
      message,
    };
  }

  @Mutation('remove<%= namePluralPascal %>')
  async remove(
    @Context() context: ContextType,
    @Args(Remove<%= namePascal %>Pipe) { filter }: <%= namePascal %>RemoveArgs,
  ): Promise<EdgesResponse<<%= namePascal %>>> {
    const { nModified, results } = await this.commandBus.execute(
      new RemoveMany<%= namePascal %>Command(filter, context),
    );

    if (nModified === 0) {
      return {
        edges: results,
        message: 'Nenhuma cenário foi removido!',
      };
    }

    const message =
      nModified === 1
        ? 'Cenário removido com sucesso!'
        : `Foram removidos ${nModified} cenários!`;

    return {
      edges: results,
      message,
    };
  }

  @ResolveField('cacheKey')
  cacheKey(@Parent() model: <%= namePascal %>) {
    return `<%= nameCamel %>:${model.slug}`;
  }
}
