import { Model } from 'mongoose';
import { gql } from 'apollo-server';
import { <%= namePascal %> } from 'src/<%= namePlural %>/schemas';
import { <%= namePascal %>FindArgs } from 'src/<%= namePlural %>/dto';
import { GraphqlTestSuite } from '../stub/helpers/graphql-test-suite';
import { FRAGMENT_<%= nameUp %> } from './fragments';

const QUERY_FIND = gql`
  query find<%= namePascal %>($id: ID!) {
    <%= nameCamel %>(id: $id) {
      ...<%= namePascal %>Frag
    }
  }
  ${FRAGMENT_<%= nameUp %>}
`;

describe('GraphQl find <%= namePascal %>  (e2e)', () => {
  let app: GraphqlTestSuite;
  let <%= nameCamel %>Model: Model<<%= namePascal %>>;
  let <%= nameCamel %>: <%= namePascal %>;

  beforeAll(async () => {
    app = new GraphqlTestSuite();
    await app.init();

    app.mockeryKeycloak();

    <%= nameCamel %>Model = app.get('<%= namePascal %>Model');

    <%= nameCamel %> = await new <%= nameCamel %>Model({
      name: 'Demo',
      slug: 'demo',
      thumb: 'demo.jpg',
      position: 1,
      enable: true,
    }).save();
  });

  afterAll(async () => {
    await app.close();
  });

  it('find > OK', async () => {
    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>FindArgs>(QUERY_FIND, { id: <%= nameCamel %>._id });

    response
      .assertNoErrors()
      .assertPropertyVal(<%= nameCamel %>.name, 'name');
  });

  it('find > not found', async () => {
    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>FindArgs>(QUERY_FIND, { id: '5ff7d3111d1ed9c37b6dd603' });

    response.assertNoErrors();

    expect(response.firstResult).toBeNull();
  });
});
