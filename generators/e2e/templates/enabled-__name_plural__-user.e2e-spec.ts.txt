import { gql } from 'apollo-server';
import { Model } from 'mongoose';
import { <%= namePascal %> } from 'src/<%= namePlural %>/schemas';
import { GraphqlTestSuite } from '../stub/helpers/graphql-test-suite';

const QUERY_ALL = gql`
  query allFromUser {
    <%= namePlural %> {
      cacheKey
      name
      slug
      thumb
      timestamp {
        unix
      }
    }
  }
`;

describe('GraphQl Enabled <%= namePluralPascal %> from Users (e2e)', () => {
  let app: GraphqlTestSuite;
  let <%= nameCamel %>Model: Model<<%= namePascal %>>;
  let <%= namePlural %>: <%= namePascal %>[] = [];

  beforeAll(async () => {
    app = new GraphqlTestSuite();
    await app.init();

    app.mockKeyCloak();

    <%= nameCamel %>Model = app.get('<%= namePascal %>Model');

    <%= namePlural %> = [];

    <%= namePlural %>[0] = await new <%= nameCamel %>Model({
      name: 'Demo',
      slug: 'demo',
      thumb: 'demo.jpg',
      position: 1,
      enable: false,
    }).save();

    <%= namePlural %>[1] = await new <%= nameCamel %>Model({
      name: 'Foo',
      slug: 'foo',
      thumb: 'foo.jpg',
      position: 2,
      enable: true,
    }).save();
  });

  afterAll(async () => {
    await app.close();
  });

  it('all', async () => {
    const response = await app.gql.authorization().request(QUERY_ALL);

    response
      .assertNoErrors()
      .assertCount(1, '')
      .assertPropertyVal(<%= namePlural %>[1].name, '0.name')
      .assertPropertyVal(`<%= nameCamel %>:${<%= namePlural %>[1].slug}`, '0.cacheKey');
  });
});
