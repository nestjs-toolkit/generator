import { Model } from 'mongoose';
import { gql } from 'apollo-server';
import { <%= namePascal %> } from 'src/<%= namePlural %>/schemas';
import { SortOrderEnum } from '@core/graphql/definitions';
import { <%= namePascal %>SearchArgs, <%= namePascal %>SearchDto } from '../../src/<%= namePlural %>/dto';
import { GraphqlTestSuite } from '../stub/helpers/graphql-test-suite';
import { FRAGMENT_RESPONSE_<%= nameUp %> } from './fragments';

const QUERY_SEARCH = gql`
  query search<%= namePascal %>($params: <%= namePascal %>SearchInput!) {
    <%= namePlural %>(params: $params) {
      ...<%= namePascal %>ResultFrag
    }
  }
  ${FRAGMENT_RESPONSE_<%= nameUp %>}
`;

describe('GraphQl search <%= namePascal %>  (e2e)', () => {
  let app: GraphqlTestSuite;
  let <%= nameCamel %>Model: Model<<%= namePascal %>>;
  let <%= namePlural %>: <%= namePascal %>[] = [];

  beforeAll(async () => {
    app = new GraphqlTestSuite();
    await app.init();

    app.mockKeyCloak();

    <%= nameCamel %>Model = app.get('<%= namePascal %>Model');

    <%= namePlural %> = [];

    <%= namePlural %>[0] = await new <%= nameCamel %>Model({
      name: 'Demo',
      slug: 'demo',
      thumb: 'demo.jpg',
      position: 1,
      enable: false,
    }).save();

    <%= namePlural %>[1] = await new <%= nameCamel %>Model({
      name: 'Foo',
      slug: 'foo',
      thumb: 'foo.jpg',
      position: 2,
      enable: true,
    }).save();

    <%= namePlural %>[2] = await new <%= nameCamel %>Model({
      name: 'Bar',
      slug: 'bar',
      thumb: 'bar.jpg',
      position: 3,
      enable: true,
    }).save();
  });

  afterAll(async () => {
    await app.close();
  });

  it('search > q=fo', async () => {
    const params: <%= namePascal %>SearchDto = {
      q: 'fo',
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(1, 'edges')
      .assertPropertyVal(<%= namePlural %>[1].name, 'edges.0.name');
  });

  it('search > AND enable=true', async () => {
    const params: <%= namePascal %>SearchDto = {
      and: {
        enable: false,
      },
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(1, 'edges')
      .assertPropertyVal(<%= namePlural %>[0].name, 'edges.0.name');
  });

  it('search > not results', async () => {
    const params: <%= namePascal %>SearchDto = {
      ids: ['5ff7d3111d1ed9c37b6dd603'],
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response.assertNoErrors().assertCount(0, 'edges');
  });

  it('search > ?perPage=1', async () => {
    const params: <%= namePascal %>SearchDto = {
      perPage: 1,
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(1, 'edges')
      .assertPropertyVal(<%= namePlural %>[0]._id.toString(), 'edges.0._id')
      .assertPropertyVal(3, 'pagination.lastPage')
      .assertPropertyVal(1, 'pagination.page')
      .assertPropertyVal(1, 'pagination.perPage')
      .assertPropertyVal(3, 'pagination.total');
  });

  it('search > ?perPage=1&page=2', async () => {
    const params: <%= namePascal %>SearchDto = {
      perPage: 1,
      page: 2,
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(1, 'edges')
      .assertPropertyVal(<%= namePlural %>[1]._id.toString(), 'edges.0._id')
      .assertPropertyVal(3, 'pagination.lastPage')
      .assertPropertyVal(2, 'pagination.page')
      .assertPropertyVal(1, 'pagination.perPage')
      .assertPropertyVal(3, 'pagination.total');
  });

  it('search > ?perPage=1&page=2&sort=name:asc', async () => {
    const params: <%= namePascal %>SearchDto = {
      perPage: 1,
      page: 2,
      sort: {
        name: SortOrderEnum.ASC,
      },
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(1, 'edges')
      .assertPropertyVal(<%= namePlural %>[0]._id.toString(), 'edges.0._id')
      .assertPropertyVal(3, 'pagination.lastPage')
      .assertPropertyVal(2, 'pagination.page')
      .assertPropertyVal(1, 'pagination.perPage')
      .assertPropertyVal(3, 'pagination.total');
  });

  it('search > ?ids=x,y', async () => {
    const params: <%= namePascal %>SearchDto = {
      ids: [<%= namePlural %>[0]._id, <%= namePlural %>[2]._id],
    };

    const response = await app.gql
      .authorization()
      .request<<%= namePascal %>SearchArgs>(QUERY_SEARCH, { params });

    response
      .assertNoErrors()
      .assertCount(2, 'edges')
      .assertPropertyVal(<%= namePlural %>[2]._id.toString(), 'edges.1._id')
      .assertPropertyVal(0, 'pagination.lastPage')
      .assertPropertyVal(1, 'pagination.page')
      .assertPropertyVal(12, 'pagination.perPage')
      .assertPropertyVal(2, 'pagination.total');
  });
});
