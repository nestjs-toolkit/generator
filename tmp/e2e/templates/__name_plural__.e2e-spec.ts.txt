import { Model } from 'mongoose';
import { gql } from 'apollo-server';
import { GraphqlTestSuite } from '../stub/helpers/graphql-test-suite';
import { <%= namePascal %> } from '../../src/app/<%= namePlural %>/schemas';
import { <%= namePascal %>CreateDto } from '../../src/app/<%= namePlural %>/dto';
import { <%= namePascal %>CreateInput, <%= namePascal %>UpdateInput } from '../../src/graphql';

const FRAGMENTS = {
  model: gql`
      fragment <%= namePascal %>Frag on <%= namePascal %> {
          _id
          name
          createdAt
          updatedAt
      }
  `,
  pagination: gql`
      fragment PaginationFrag on Pagination {
          total
          page
          perPage
          lastPage
      }
  `,
};

const QUERY_SEARCH = gql`
  query <%= namePluralPascal %>($params: <%= namePascal %>SearchInput) {
    <%= namePlural %>(params: $params) {
      edges {
        ...<%= namePascal %>Frag
      }
      pagination {
        ...PaginationFrag
      }
    }
  }
  ${FRAGMENTS.model}
  ${FRAGMENTS.pagination}
`;

const QUERY_FIND = gql`
  query <%= namePascal %>($id: ID!) {
    <%= name %>(id: $id) {
      ...<%= namePascal %>Frag
    }
  }
  ${FRAGMENTS.model}
`;

const MUTATION_CREATE = gql`
  mutation Add<%= namePascal %>($input: <%= namePascal %>CreateInput!) {
    create<%= namePascal %>(input: $input) {
      message
      data {
        ...<%= namePascal %>Frag
      }
    }
  }
  ${FRAGMENTS.model}
`;

const MUTATION_UPDATED = gql`
  mutation Update<%= namePascal %>($id: ID!, $input: <%= namePascal %>UpdateInput!) {
    update<%= namePascal %>(id: $id, input: $input) {
      message
      data {
        ...<%= namePascal %>Frag
      }
    }
  }
  ${FRAGMENTS.model}
`;

const MUTATION_DELETE = gql`
  mutation Delete<%= namePascal %>($ids: [ID!]!) {
    delete<%= namePascal %>(ids: $ids) {
      message
    }
  }
`;

describe('GraphQl <%= namePascal %> (e2e)', () => {
  let app: GraphqlTestSuite;
  let <%= name %>Model: Model<<%= namePascal %>>;

  const factory = async (data: Partial<<%= namePascal %>CreateDto>): Promise<<%= namePascal %>> => {
    return new <%= name %>Model(Object.assign({
      name: 'Demo',  
    } as <%= namePascal %>, data)).save();
  };

  beforeAll(async () => {
    app = new GraphqlTestSuite();
    await app.init();
    <%= name %>Model = app.get('<%= namePascal %>Model');

    app.mockKeyCloak();
  });

  beforeEach(async () => {
    await <%= name %>Model.deleteMany({});
  });

  afterAll(async () => {
    await app.close();
  });

  it('Query: <%= namePascal %> > search', async done => {
    const <%= name %>1 = await factory({
      name: 'demo' 
    });

    const <%= name %>2 = await factory({
      name: 'demo2'
    });

    const response = await app.gql.authorization().request(QUERY_SEARCH, {});

    response
      .assertNoErrors()
      .assertCount(2, 'edges')
      .assertPropertyVal(<%= name %>1.name, 'edges.0.name')
      .assertPropertyVal(<%= name %>2.name, 'edges.1.name');

    done();
  });

  it('Query: <%= namePascal %> > find', async done => {
    const <%= name %> = await factory({
      name: 'demo1'
    });

    const response = await app.gql
      .authorization()
      .request(QUERY_FIND, { id: <%= name %>._id });

    response.assertNoErrors().assertPropertyVal(<%= name %>.name, 'name');

    done();
  });

  it('Query: <%= namePascal %> > find id not found', async done => {
    const response = await app.gql.authorization().request(QUERY_FIND, {
      id: '5f646a0103293e21763ad1da',
    });

    response.assertNoErrors();

    expect(response.firstResult).toBeNull();
    done();
  });

  it('Mutation: <%= namePascal %> > create', async done => {
    const input: <%= namePascal %>CreateInput = {
      name: 'Demo  1'
    };

    const response = await app.gql
      .authorization()
      .request(MUTATION_CREATE, { input });

    response.assertNoErrors().assertPropertyVal(input.name, 'data.name');

    const <%= namePlural %> = await <%= name %>Model.find(input).exec();
    expect(<%= namePlural %>).toHaveLength(1);

    done();
  });

  it('Mutation: <%= namePascal %> > update', async done => {
    const <%= name %> = await factory({
      name: 'Demo'    
    });

    const input: <%= namePascal %>UpdateInput = {
      name: 'Demo - updated'
    };

    const response = await app.gql
      .authorization()
      .request(MUTATION_UPDATED, { id: <%= name %>._id, input });

    response
      .assertNoErrors()
      .assertPropertyExists('message')
      .assertPropertyVal(input.name, 'data.name');

    const <%= namePlural %> = await <%= name %>Model.find(input).exec();

    expect(<%= namePlural %>).toHaveLength(1);

    done();
  });

  it('Mutation: <%= namePascal %> > update invalid id', async done => {
    const input: <%= namePascal %>UpdateInput = {
      name: 'Demo- updated'
    };

    const response = await app.gql
      .authorization()
      .request(MUTATION_UPDATED, { id: '5f646a0103293e21763ad1da', input });

    response.assertErrorCode('E_MODEL_NOT_FOUND');

    done();
  });

  it('Mutation: <%= namePascal %> > delete', async done => {
    const <%= name %> = await factory({
      name: 'demo1'
    });

    const response = await app.gql
      .authorization()
      .request(MUTATION_DELETE, { ids: [<%= name %>._id] });

    response.assertNoErrors().assertPropertyExists('message');

    const <%= namePlural %> = await <%= name %>Model
      .findOne({ _id: <%= name %>._id })
      .exec();

    expect(<%= namePlural %>).toBeNull();

    done();
  });

  it('Mutation: <%= namePascal %> > delete invalid ID', async done => {
    const response = await app.gql
      .authorization()
      .request(MUTATION_DELETE, { ids: ['5f646a0103293e21763ad1da'] });

    response.assertErrorCode('E_MODEL_NOT_FOUND');

    done();
  });
});
